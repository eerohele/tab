;; Tab is little program that turns Clojure data structures into tables.
;;
;; It focuses on two types of data structures: maps and seqs of maps.

(require '[tab.api :as tab])

;; Run a Tab.
(def tab
  (tab/run
    ;; Tell Tab to initially show only the first two levels of a nested map.
    :print-level 2
    ;; Tell Tab to initially show only the first eight items of a sequence of
    ;; scalar values.
    :print-length 8))

;; To send a thing to Tab, tap it.
;;
;; When given a scalar value, Tab just prints it.
(tap> :hello-tab)

;; Same with seqs of scalars.
(tap> [1 2 3])

;; If the seq has many values, Tab only shows the first :print-length (or
;; *print-length* if set) values.
;;
;; You can click the value to show the entire seq.
;;
;; You can click the value again to again show the first :print-length (here 8)
;; values.
(tap> {:range (range 32)})

;; Pretty much everything else Tab tries to print as a table.
;;
;; Maps become tables with headers on the left.
(tap> {:a 1 :b 2 :c 3})

;; Seq of maps become tables with headers at the top.
(tap> [{:a 1 :b 2 :c 3} {:a 4 :b 5 :c 6}])

;; If the maps in the seq share no keys, Tab fills in the blanks.
(tap> [{:a 1} {:b 2}])

;; Tab can also tabulate seqs of seqs of maps.
(tap> [[{:a 1 :b 2}] [{:a 3 :b 4}]])

;; Tab datafies (via clojure.datafy/datafy) the things it receives.
;;
;; This makes Tab useful for visualizing objects that are normally
;; opaque. For example, classes. Clojure knows how to datafy classes out of the
;; box.
(tap> java.net.ServerSocket)

;; You can collapse or expand nodes by clicking on the － and ＋ icons.
;;
;; To collapse or expand every node under a given node, hold down the Alt key
;; while clicking on the － and ＋ icon.
;;
;; To zoom in on a nested table, click the table label typeset in small caps
;; (e.g. ARRAY MAP).
;;
;; To copy the value a table is generated from to your clipboard, hold Alt and
;; click the table label.

;; You can (extend-protocol clojure.core.protocols/Datafiable) to teach Clojure
;; how to datafy other things.
;;
;; For example, Clojure already knows how to datafy namespaces.
(tap> (find-ns 'clojure.set))

;; Weirdly, though, Clojure *doesn't* know how to datafy vars. Let's teach it
;; how to do that.
(do
  (require '[clojure.core.protocols :refer [Datafiable]])

  (extend-protocol Datafiable
    clojure.lang.Var
    (datafy [this]
      (assoc (meta this) :var this))))

;; Now, we can tabulate vars, too.
(tap> #'clojure.core/mapcat)

;; Tab has experimental support for navigating to namespaces, vars, and
;; classes. Try tapping the form below. Then, try clicking on cells that
;; contain namespaces (clojure.lang.Namespace objects), vars (cells whose
;; contents begin with #'), or Java class names (e.g. java.io.File).
(tap>
  (->>
    (ns-publics 'clojure.java.io)
    (vals)
    (map (comp #(dissoc % :doc) meta))
    (sort-by :added compare)
    (reverse)))

;; Now that you've navigated away from Tab's main page, you have to navigate
;; back to it to see new tapped values.

;; Tabular data is obviously what Tab excels at.
(tap> (sort-by :name (:members ((requiring-resolve 'clojure.reflect/reflect) BigInteger))))

;; Tab can handle deeply nested maps pretty well, too. tools.analyzer.jvm can make us one.
(require '[clojure.tools.analyzer.jvm :as analyzer.jvm])

(tap>
  (analyzer.jvm/analyze
    '(sequence (comp (filter odd?) (map inc) (partition-by even?)) (range 10))))

;; Tab keeps a history of (by default) the last 16 things you've given
;; it. You can travel back and forth in time.

;; If you give Tab an atom, Tab starts watching it for changes.

(def a (atom [1]))

;; If you tap an atom, Tab updates every time you update the atom.
;;
;; The first tap of an atom looks a bit weird, since an atom datafies as a
;; vector of one item that contains the dereferenced value of the atom.
(tap> a)

;; Once you change the state of the atom, Tab sends the new state of the atom
;; to the browser.
(swap! a conj 2)
(swap! a conj 3)
(swap! a conj 4)

;; Let's make helper function that, given a function, calls it every second.
(defn every-second
  "Given a no-arg fn, call the fn every second.

  To halt, call the ret value (a no-arg fn)."
  [f]
  (let [executor-service (java.util.concurrent.Executors/newScheduledThreadPool 1)
        _ (.scheduleAtFixedRate executor-service f 0 1 java.util.concurrent.TimeUnit/SECONDS)]
    (fn [] (.shutdown executor-service))))

;; Start a timer that taps the runtime stats every second.
;;
;; Since we set :print-length to 8, Tab will show no more than the first 8
;; values of the vector in the atom.
(def timer (every-second #(swap-vals! a (fn [xs] (conj xs (inc (peek xs)))))))

;; Halt the timer.
(timer)

;; That's it for this intro. Bye now!
(tab/halt tab)
